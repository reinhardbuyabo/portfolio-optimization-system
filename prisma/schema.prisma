datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    ADMIN
    PORTFOLIO_MANAGER
    INVESTOR
    ANALYST
}

enum RiskTolerance {
    LOW
    MEDIUM
    HIGH
}

enum PortfolioStatus {
    DRAFT
    ACTIVE
    ARCHIVED
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(INVESTOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  resetToken       String?   @db.VarChar(255)
  resetTokenExpiry DateTime?

  // 2FA fields
  twoFactorCode       String?   @db.VarChar(10)
  twoFactorExpiry     DateTime?
  twoFactorVerifiedAt DateTime?

  // WebAuthn challenge storage
  webauthnChallenge String?   @db.VarChar(255)
  challengeExpiry   DateTime?

  investorProfile InvestorProfile?
  portfolios      Portfolio[]
  accounts        Account[]
  sessions        Session[]
  authenticators  Authenticator[]
}

model Account {
    id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId             String   @db.Uuid
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String?  @db.Text
    access_token       String?  @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?  @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    sessionToken String   @unique
    userId       String   @db.Uuid
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model InvestorProfile {
    id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId        String        @unique @db.Uuid
    budget        Float
    riskTolerance RiskTolerance
    constraints   Json?
    preferences   Json?

    user User @relation(fields: [userId], references: [id])
}

model Asset {
    id     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    ticker String                @unique
    name   String
    sector String?
    data   MarketData[]
    allocs PortfolioAllocation[]
}

model MarketData {
    id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    assetId        String   @db.Uuid
    date           DateTime
    open           Float
    high           Float
    low            Float
    close          Float
    volume         Int
    sentimentScore Float?

    asset Asset @relation(fields: [assetId], references: [id])
}

model Portfolio {
    id        String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    userId    String          @db.Uuid
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
    status    PortfolioStatus @default(DRAFT)

    user        User                  @relation(fields: [userId], references: [id])
    allocations PortfolioAllocation[]
    results     OptimizationResult[]
    simulations Simulation[]
}

model PortfolioAllocation {
    id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    portfolioId String @db.Uuid
    assetId     String @db.Uuid
    weight      Float

    portfolio Portfolio @relation(fields: [portfolioId], references: [id])
    asset     Asset     @relation(fields: [assetId], references: [id])
}

model OptimizationResult {
    id                 String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    portfolioId        String @db.Uuid
    expectedReturn     Float
    expectedVolatility Float
    sharpeRatio        Float
    sortinoRatio       Float
    maxDrawdown        Float

    portfolio Portfolio @relation(fields: [portfolioId], references: [id])
}

model Simulation {
    id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    portfolioId        String   @db.Uuid
    startDate          DateTime
    endDate            DateTime
    performanceMetrics Json?

    portfolio Portfolio @relation(fields: [portfolioId], references: [id])
}

model Authenticator {
    id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    credentialID         String   @unique
    userId               String   @db.Uuid
    providerAccountId    String
    credentialPublicKey  String   @db.Text
    counter              BigInt
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, credentialID])
}
